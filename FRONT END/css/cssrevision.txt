1. css ?
cascading systle sheets . css is optional  language .
----------------------------------------------------
2. why css ?
css is  a very demanded  skill in the world  of web devlopment .
---------------------------------------------------------------
3.simple program
    <style>
    body{
        background-color:red;
    }
    </style>
----------------------------------------------------------------
4. link file css into html 
<!-- i. external css-->
<!--<link rel="stylesheet" type="text/css" href="style.css">-->

<!--ii.internal css -->
<!--<style>
p {
    color:blue;
    background-color: brown;
}
</style>-->
<!-- inline css --> 
-----------------------------------------------------------------
5. what is DOM ?
dom stand for document object module  when a page  is  loaded the brower creates  
a dom of the page which is consturcted as a tree of object .
---------------------------------------------------------------
6. HTML ID AND CLASS ATTRIBUTES ?
ID :
<div id="first>
</div>
class:
<section class="second">
</section>

 - same calss to multiple element .

 <section class="red bg-blue">
 </section>
 --------------------------------------------------------------------
 7. selectors html ?
 - a css selector is used to select an html elements for styling 
        body{
        color: red;
        background-color:pink;
        }
-element  selector : is used to an element off the tagname 
    h1{
        color:blue}
-id selector : used an element with a given id 
#first{
    color:red;
    background:black;

}
class selector :  select an element with a given class 
 .red{
background:blue;
}
----------------------------------------------------
8. color and background :
 types of color :
 - RGB:red,green,blue
 - HEX:
 - HSL:

p{
    color:red;
    background-color:blue;
    background-image:url(filename.extension)
    background-repeat:x;
    background-repeat:y;
    background-repeat:no-repeat;
    background-attachment:fixed,scroll;
    background-position:buttom,top,left,right;
}
--------------------------------------------------------------
9. box model 
/* Set the margin, border, and padding  */
margin-top
margin-right
margin-bottom
margin-left

Padding - Individual Sides
CSS has properties for specifying the padding for each side of an element:
padding-top
padding-right
padding-bottom
padding-left

CSS Border Style
dotted - Defines a dotted border
dashed - Defines a dashed border
solid - Defines a solid border
double - Defines a double border
groove - Defines a 3D grooved border. The effect depends on the border-color value
ridge - Defines a 3D ridged border. The effect depends on the border-color value
inset - Defines a 3D inset border. The effect depends on the border-color value
outset - Defines a 3D outset border. The effect depends on the border-color value
none - Defines no border
hidden - Defines a hidden border

footer {
  background-color: white;
  margin-top: 20px;
  border: 1px solid black;
  padding: 10px;
}
--------------------------------------------------------------------
10. font and display 
<!-- Serif,Sans-serif ,Monospace, Cursive ,Fantasy most commonly used font fallback -->
p1 {
  font-family: "Times New Roman", Times, serif;
  font-style: normal;
  font-size: 40px; 
  font-variant
  font-weight
  font-size/line-height
  font-family
}
The display property is the most important CSS property for controlling layout.
p {display: none;}
p {display: inline;}
p {display: block;}
p {display: inline-block;}
*********************************************
li{
    display:inline;
}
 <li><a href="/html/default.asp" target="_blank">HTML</a></li>
 display = link 
h2 {
  visibility: visible;
}
h2{
  visibility: hidden;
}
----------------------------------------------------------------
11. Size, Position & Lists
there are more unit for describing size other than px
there are rem,cm,vm,wh,etc.
-pixel (px) are  reative to the viewing device.
reative length :  these unit  are reative to the other length property folowing are some of the most commonly usede reative length.
a) em--> unit reative to the parent font size. eg:  px * em = font size
b) rem--> unit reative to the root  font size
c) vm--> unit reative to 1% veiw port width.
d) vn -->
e) %--->
height/width property :
    min-height :40px;
    min-width: 40px;
    max-width:40px;
    max-height:40px;
The position Property:
a) static --> the default position top/bottom/left/right/z-index has no effect.
eg; 
div.static {
  position: static;
  border: 3px solid #73AD21;
  background-color:red;
}
<div class="static">
This div element has position: static;
</div>
b) reative:--> the top/bottom/left/right/z-index will now work .otherwise the element is in the floe of document  live static
c) absolute --> the  element  is removed form the flow and is reatively positioned to its first non-static ancestor top/bottom etc works.
d) fixed--> just like absolute except the element  is positioned reative to the browser window
e) sticky :the element is Positioned based on user scroll postion.

# list 
unordered lists (<ul>) -> the list items are marked with bullets
ordered lists (<ol>) -> the list items are marked with numbers or letters
a)The list-style-type property specifies the type of list item marker.
ul.a {
  list-style-type: circle;
}
ul.b {
  list-style-type: square;
}
ol.c {
  list-style-type: upper-roman;
}
ol.d {
  list-style-type: lower-alpha;
}

<ul class="a">
  <li>Coffee</li>
  <li>Tea</li>
  <li>Coca Cola</li>
</ul>
b) The list-style-image property specifies an image as the list item marker:
ul {
  list-style-image: url('sqpurple.gif');
}
c)The list-style-position property specifies the position of the list-item markers (bullet points).
ul.a {
  list-style-position: outside;
}
ul.b {
  list-style-position: inside;
}
------------------------------------------------------------
12. flexbox 
  a)float Property : float property  is simple  it just flow towards left and rigth.
    eg: float:right;
  b) clear property :  used to clear the float. it specifies what element  can float beside a give element .
  clear:right;

C] Flexbox Items properties:
align-self-->	Specifies the alignment for a flex item (overrides the flex container's align-items property)
flex-->	A shorthand property for the flex-grow, flex-shrink, and the flex-basis properties
flex-basis	-->Specifies the initial length of a flex item
flex-grow	-->Specifies how much a flex item will grow relative to the rest of the flex items inside the same container
flex-shrink-->	Specifies how much a flex item will shrink relative to the rest of the flex items inside the same container
order	--> Specifies the order of the flex items inside the same container

.container {
    display: flex; /* set the container to use flexbox layout */
    flex-direction: row; /* set the main axis to be horizontal */
    justify-content: space-between; /* align the boxes with space between them */
    align-items: center; /* vertically center the boxes */
    height: 200px; /* set the height of the container */
    background-color: #f5f5f5; /* set the background color of the container */
  }

--------------------------------------------------------
13. media and grid 
All CSS Grid Properties
Property-->	Description
column-gap-->	Specifies the gap between the columns
gap-->	A shorthand property for the row-gap and the column-gap properties
grid-->	A shorthand property for the grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and the grid-auto-flow properties
grid-area	--> Either specifies a name for the grid item, or this property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end, and grid-column-end properties
grid-auto-columns-->	Specifies a default column size
grid-auto-flow-->	Specifies how auto-placed items are inserted in the grid
grid-auto-rows-->	Specifies a default row size
grid-column-->	A shorthand property for the grid-column-start and the grid-column-end properties
grid-column-end-->	Specifies where to end the grid item
grid-column-gap-->	Specifies the size of the gap between columns
grid-column-start-->	Specifies where to start the grid item
grid-gap-->	A shorthand property for the grid-row-gap and grid-column-gap properties
grid-row-->	A shorthand property for the grid-row-start and the grid-row-end properties
grid-row-end-->	Specifies where to end the grid item
grid-row-gap-->	Specifies the size of the gap between rows
grid-row-start-->	Specifies where to start the grid item
grid-template-->	A shorthand property for the grid-template-rows, grid-template-columns and grid-areas properties
grid-template-areas-->	Specifies how to display columns and rows, using named grid items
grid-template-columns-->	Specifies the size of the columns, and how many columns in a grid layout
grid-template-rows-->	Specifies the size of the rows in a grid layout
row-gap-->Specifies the gap between the grid rows
.grid-container {
  display: grid;
  grid-template-columns: auto auto auto auto;
  gap: 10px;
  background-color: #2196F3;
  padding: 10px;
}
<div class="grid-container">
  <div>1</div>
  <div>2</div>
  <div>3</div>  
  <div>4</div>
  <div>5</div>
  <div>6</div>  
  <div>7</div>
  <div>8</div>
</div>
media :
@media: Keyword that indicates a media query is being defined.
width: Width of the viewport.
height: Height of the viewport.
min-width: Minimum width of the viewport.
max-width: Maximum width of the viewport.
min-height: Minimum height of the viewport.
max-height: Maximum height of the viewport.
orientation: Orientation of the device, either portrait or landscape.
aspect-ratio: Ratio of the width to the height of the viewport.
min-aspect-ratio: Minimum ratio of the width to the height of the viewport.
max-aspect-ratio: Maximum ratio of the width to the height of the viewport.
color: Number of bits per color component of the display.
min-color: Minimum number of bits per color component of the display.
max-color: Maximum number of bits per color component of the display.
resolution: Pixel density of the display.
min-resolution: Minimum pixel density of the display.
max-resolution: Maximum pixel density of the display.
device-width: Width of the device screen.
device-height: Height of the device screen.
min-device-width: Minimum width of the device screen.
max-device-width: Maximum width of the device screen.
min-device-height: Minimum height of the device screen.
max-device-height: Maximum height of the device screen.
hover: Indicates whether the device supports hover or not.
pointer: Indicates whether the device has a pointing device or not.
<style>
body {
  background-color: lightgreen;
}
@media only screen and (orientation: landscape) {
  body {
    background-color:red;
  }
}
</style>
-----------------------------------------------
14. Transforms, Transitions & Animations 
Transforms--->The CSS transform property is used to apply 2D or 3D transformations to an element. The transformations can include rotation, scaling, skewing, and translating an element in different directions.
2D Transformations :
matrix(): Specifies a 2D transformation matrix with six values.
translate(): Moves an element along the X and/or Y axis.
translateX(): Moves an element along the X axis.
translateY(): Moves an element along the Y axis.
scale(): Scales an element along the X and/or Y axis.
scaleX(): Scales an element along the X axis.
scaleY(): Scales an element along the Y axis.
rotate(): Rotates an element clockwise around a given point.
skew(): Skews an element along the X and/or Y axis.
skewX(): Skews an element along the X axis.
skewY(): Skews an element along the Y axis.
3D Transformations :
matrix3d(): Specifies a 3D transformation matrix with 16 values.
translate3d(): Moves an element along the X, Y, and/or Z axis.
translateZ(): Moves an element along the Z axis.
scale3d(): Scales an element along the X, Y, and/or Z axis.
scaleZ(): Scales an element along the Z axis.
rotate3d(): Rotates an element around a given axis in 3D space.
rotateX(): Rotates an element around the X axis in 3D space.
rotateY(): Rotates an element around the Y axis in 3D space.
rotateZ(): Rotates an element around the Z axis in 3D space.
perspective(): Specifies the perspective on how 3D elements are viewed.
div.a {
  width: 150px;
  height: 80px;
  background-color: yellow;
 
  transform: rotate(20deg);
}
<h2>transform: rotate(20deg):</h2>
<div class="a">Hello World!</div>
<br>

Transitions :CSS transitions allows you to change property values smoothly, over a given duration.
transition-property: Specifies the name of the CSS property to which the transition should be applied. Multiple properties can be specified by separating them with commas.
transition-duration: Specifies the duration of the transition in seconds or milliseconds.
transition-timing-function: Specifies the timing function used to determine how the transition progresses over its duration. This can be a predefined function like ease, linear, ease-in, ease-out, or ease-in-out, or a custom cubic-bezier function.
transition-delay: Specifies the delay time before the transition starts, in seconds or milliseconds.
eg: 
<head>
<style>
input[type="text"] {
  width: 100px;
  -webkit-transition: width .35s ease-in-out;
  transition: width .35s ease-in-out;
}
input[type="text"]:focus {
  width: 250px;
}
</style>
</head>
<body>
Search: <input type="text" name="search">
</body>
CSS animation properties:
animation-name: Specifies the name of the keyframe animation to be played. You define keyframes using the @keyframes at-rule.
animation-duration: Specifies the duration of the animation.
animation-timing-function: Specifies the timing function to use for the animation.
animation-delay: Specifies a delay before the animation starts.
animation-iteration-count: Specifies the number of times the animation should be played.
animation-direction: Specifies whether the animation should play forwards, backwards, or alternate.
animation-fill-mode: Specifies what styles should be applied to the element before and after the animation plays.
animation-play-state: Specifies whether the animation is running or paused.
<style>
.pulse {
width: 100px;
height: 100px;
background-color: red;
border-radius: 50%;
position: relative;
animation: pulse 1s ease-in-out infinite;
}
@keyframes pulse {
0% {transform: scale(1);}
50% {transform: scale(1.2);}
100% {transform: scale(1);}
}
</style>
</head>
<body>
<div class="pulse"></div>
-----------------------------------------------------------------
15.